> Texto claro para o agente construir **exatamente** o que foi pedido. **Não expanda. Não invente.**

---

## 1) Objetivo

Construir um sistema multi‑tenant para tradução de documentos onde:

* **Workflows** são compostos por **agentes** (OCR, extratores estruturados, agentesnão estruturados, tradutor), **grupos de extratores** e **review gates** (pontos de revisão humana definidos no workflow).
* O **Super‑Admin** define o workflow (inclusive **onde** existem revisões e **qual entrada** cada revisão usa: agente anterior **ou** grupo agregado).
* O **Operador** escolhe um workflow disponibilizado, **pode clonar** para editar prompts/HTML, **inicia** jobs (upload) e **revisa** nos review gates. Não altera ordem do workflow.

---

## 2) Multi‑tenant (obrigatório)

* Escopo por `tenant_id` em **todas** as tabelas e requisições.
* RLS (Row‑Level Security) por `tenant_id`.
* S3/MinIO por prefixo: `s3://docs/{tenant_id}/jobs/{job_id}/...`.
* Webhooks do n8n sempre incluem `tenant_id`; mismatch → **409**.

---

## 3) Papéis

* **Super‑Admin** (global): Tenants/Usuários; Agentes globais; Templates globais; **Workflow Builder** (com grupos e review gates); disponibiliza workflows aos tenants.
* **Admin do Tenant**: pode **clonar** agentes/templates/workflows globais (o clone vira do tenant) e gerenciar usuários.
* **Operador**: escolhe workflow (da lista ou **clonado**), faz **upload** e **revisa** nos pontos definidos.

> Regras de clonagem: ao editar item global, cria‑se **clone** no tenant. O Operador **não** pode mudar **ordem** nem **posicionamento** de review gates nem **composição de grupos**; pode editar **prompts/params dos agentes** e **HTML** do template no clone.

---

## 4) Tipos de Agente e IO

* `ocr`: entrada `pdf_url`; saída `{ texto_md, pages[] }`.
* `extract_structured`: entrada `{ pages[], texto_md? }`; saída `{ partial_keys{...} }`.
* `extract_html`: entrada `pdf_url`; saída `{ html{...} }`.
* `translator`: entrada `{ keys, target_lang, html? }`; saída `{ keys_translated, html_translated? }`.
* (Outros tipos fora do MVP.)

Campos comuns do **Agente**: `name`, `type`, `model`, `temperature`, `system_prompt`, `system_message`, `webhook_url`, `output_type` (`structured|text|html`), `responsible_keys[]`, `provider`, `token_ref_override?` (herda do workflow por padrão).

---

## 5) **Grupos de Extratores** (agregação)

* Um **grupo** contém **2..N** agentes `extract_structured` que rodam **em sequência** ou **em paralelo**.
* O **input do grupo** é o **output do nó anterior** (normalmente o OCR: `{ pages, texto_md }`).
* O **output do grupo** é uma **agregação** (merge) dos `partial_keys` de todos os membros em um **JSON plano**:

  * Regra de conflito (MVP): **first‑write wins** por ordem de membro; guardar os demais em histórico (não exibir no MVP).
  * Cada chave agregada guarda `source_agent_id` do agente que a escreveu **primeiro**.

---

## 6) **Review Gates** (pontos de revisão humana)

* Inseridos **no Workflow** pelo **Super‑Admin**.
* Cada gate tem **qual é o input** que será revisado:

  * `input = agent:<agentNodeId>` → revisa **somente** o output **daquele agente** (ex.: revisar OCR).
  * `input = group:<groupNodeId>` → revisa a **soma dos outputs** dos membros do **grupo** (ex.: revisar todas as chaves estruturadas/respostas extraídas pelos 3 extratores).
* Ao abrir o gate:

  * App exibe **PDF/imagens** à esquerda.
  * À direita, exibe **form** com as **chaves** do input escolhido (agente **ou** grupo agregado).
  * Operador pode **editar**, **inserir chave faltante** e **salvar/aprovar**.
* Ao aprovar, o fluxo **continua** para o próximo nó do workflow.

---

## 7) **Workflow Builder** (Super‑Admin)

Nó(s) possíveis e seus campos mínimos:

* `agent` → `{ id, type, agent_id }`
* `group` → `{ id, type, members:[agent_id...], input_from:<prevNodeId> }`
* `review_gate` → `{ id, type, input: { kind:'agent'|'group', refId } }`
* `translator` → `{ id, type, agent_id, target_lang }`
* `render` → `{ id, type, template_id }`

**Exemplo (JSON simplificado):**

```json
{
  "steps": [
    { "id": "a_ocr", "type": "agent", "agent_id": "agt_ocr" },
    { "id": "g_ex", "type": "group", "members": ["agt_selos", "agt_texto", "agt_cartorio"], "input_from": "a_ocr" },
    { "id": "rv_ex", "type": "review_gate", "input": { "kind": "group", "refId": "g_ex" } },
    { "id": "a_trad", "type": "translator", "agent_id": "agt_trad_it", "target_lang": "it" },
    { "id": "rv_tr", "type": "review_gate", "input": { "kind": "agent", "refId": "a_trad" } },
    { "id": "rend", "type": "render", "template_id": "tpl_certidao" }
  ]
}
```

---

## 8) **Operador** — o que ele pode fazer

1. **Escolher workflow** disponibilizado pelo Super‑Admin.
2. **Configurar token** do Workflow **(obrigatório antes de rodar)**, caso ainda não exista para **aquele tenant+workflow** (modal de credenciais).
3. **Clonar workflow** para o seu tenant e **editar**:

   * **Prompts/params** dos agentes (inclusive override de provider/token por etapa, se desejar).
   * **HTML** do template (layout/cabeçalho). **Não** altera ordem, grupos, nem posições dos review gates.
4. **Iniciar tradução**: selecionar workflow + upload/URL. Se faltar token do Workflow → **bloquear** e exigir configuração.
5. **Revisar e aprovar** nos **review gates** quando o app for notificado.

## 9) Fluxo de execução (alto nível)

1. Operador escolhe/copia **workflow** e faz **upload** (cria `job`).
2. App dispara n8n com `{ tenant_id, job_id, workflow_id, pdf_url, llm{provider, token_ref} }`.
3. n8n executa os nós em ordem:

   * `a_ocr` → `{ pages, texto_md, html }`.
   * `g_ex` (sequência ou paralelo) → agrega `partial_keys` → `keys`.
   * `rv_ex` → app recebe `keys` (do grupo) para **revisão**.
   * `a_trad` → recebe `keys` aprovadas → retorna `keys_translated`.
   * `rv_tr` → revisão da tradução.
   * `rend` → aplica `keys_translated` ao template → retorna `pdf_url_final`.

   ---

   * `a_ocr` → `{ html }`.
   * `a_trad` → recebe `html` → retorna `html_translated`.
   * `rv_tr` → revisão da tradução.
   * `rend` → aplica `keys_translated` ao template → retorna `pdf_url_final`.
4. App salva estados; Operador baixa PDF final.

---

## 9A) Tokens & Providers (LLM)

* **O token é do tenant** (cliente). O Super‑Admin **não** fornece tokens.
* **Obrigatório**: antes de rodar **qualquer** workflow (herdado ou clonado), o Operador deve configurar o **token no Workflow** (escopo tenant→workflow). **Sem esse token, o job não inicia.**
* **Override opcional por agente** (provider/token) para aquela etapa específica — **não elimina** a exigência do token no Workflow.
* **Precedência de uso**: Agente (se override) → Workflow; se Workflow estiver sem token → **422** ao iniciar job.
* O app só trafega `token_ref` (ex.: `vault://ten_a/openai`); o n8n lê o segredo.

## 10) Contratos de payload (app ↔ n8n)

### 10.1 Disparo inicial (app → n8n)

**Pré‑condição**: o Workflow (no escopo do tenant) deve possuir `llm_token_ref_default`. Caso contrário, **bloquear** a criação do job com **422**: `{"error":"Tenant API token not configured for this workflow"}`.

```json
{
  "tenant_id": "ten_a",
  "job_id": "job_123",
  "workflow_id": "wf_001",
  "pdf_url": "https://s3/ten_a/jobs/job_123/original.pdf",
  "llm": { "provider": "openai", "token_ref": "vault://ten_a/openai" }
}
```

### 10.2 Gate de revisão de **grupo** (n8n → app)

```json
{
  "tenant_id": "ten_a",
  "job_id": "job_123",
  "gate_id": "rv_ex",
  "input_kind": "group",
  "ref_id": "g_ex",
  "keys": { "nome": "JOÃO", "cpf": "123..." },
  "pages": ["https://s3/.../p1.jpg", "https://s3/.../p2.jpg"],
  "key_sources": { "nome": "agt_texto", "cpf": "agt_cartorio" }
}
```

### 10.3 Aprovação de revisão (app → n8n)

```json
{
  "tenant_id": "ten_a",
  "job_id": "job_123",
  "gate_id": "rv_ex",
  "keys_reviewed": { "nome": "JOÃO DA SILVA", "cpf": "123..." }
}
```

### 10.4 Gate de revisão do **tradutor** (n8n → app)

```json
{
  "tenant_id": "ten_a",
  "job_id": "job_123",
  "gate_id": "rv_tr",
  "input_kind": "agent",
  "ref_id": "a_trad",
  "keys_translated": { "nome": "GIOVANNI", "cpf": "123..." }
}
```

### 10.5 Aprovação final & render (n8n → app)

```json
{
  "tenant_id": "ten_a",
  "job_id": "job_123",
  "status": "done",
  "pdf_url_final": "https://s3/ten_a/jobs/job_123/final.pdf"
}
```

---

## 11) Métricas por agente

* Cada **chave** agregada guarda `source_agent_id` do primeiro agente que a preencheu.
* Na **revisão**, ao editar uma chave, registrar em `key_audit` (`edited_by`, `old_value`, `new_value`, `source_agent_id`).
* Acurácia do agente no job: `1 − (editadas_do_agente / total_responsible_keys_do_agente_no_job)`.

---

## 12) UI — navegação mínima

* **Super‑Admin**: Tenants & Usuários · Agentes · Templates · **Workflow Builder (com grupos e review gates)** · Disponibilizar Workflows.
* **Operador/Tenant**:

  1. **Workflows** (listar os disponibilizados + **Clonar** + editar prompts/HTML no clone).
  2. **Iniciar Tradução** (escolher workflow + upload/URL).
  3. **Revisões Pendentes** (lista de jobs parados em review gates) → abrir **tela de revisão** (PDF à esq., chaves do **input selecionado pelo gate** à dir.).
  4. **Jobs** (histórico e download do PDF final).

---

## 13) Estados do Job

`queued → processing → review:<gate_id> → translating → review:<gate_id> → done | failed`

---

## 14) O que **não** fazer (fora do MVP)

* Reordenação de steps pelo Operador.
* Criar novos tipos de agente além dos listados.
* Formulário público por metadata; coleções repetíveis complexas; BI; realtime colaborativo.

---

## 15) Aceite (binário)

1. É possível **criar workflow** com: OCR → grupo(3 extratores) → review(g\_ex) → tradutor → review(a\_trad) → render.
2. Operador **clona** o workflow, **edita prompts/HTML**, **sem** mudar ordem/grupos/gates.
3. **Sem token no Workflow** (tenant+workflow) ao iniciar job → **422** e modal de configuração; **com** token → criação do job e disparo ao n8n.
4. Disparo do job envia `tenant_id` e `token_ref`. n8n retorna para **review do grupo** com `keys` + `key_sources`.
5. Aprovação avança para **tradutor**, nova **review** e **PDF final** disponível.
6. RLS impede acesso cruzado entre tenants.